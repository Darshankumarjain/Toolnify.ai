{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darsh\\\\OneDrive\\\\Desktop\\\\New folder\\\\toolnify-ai\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport AIChatbot from './components/AIChatbot';\nimport AICodeGeneratorTool from './components/AICodeGeneratorTool';\nimport AIEmailWriterTool from './components/AIEmailWriterTool';\nimport AIStoryGeneratorTool from './components/AIStoryGeneratorTool';\nimport LinkedInPostWriterTool from './components/LinkedInPostWriterTool';\nimport PromptGeneratorTool from './components/PromptGeneratorTool';\nimport SettingsPage from './components/SettingsPage';\nimport TextSummarizationTool from './components/TextSummarizationTool';\nimport TextToSpeechTool from './components/TextToSpeechTool';\nimport TextTranslatorTool from './components/TextTranslatorTool';\nimport ToolSelectionPage from './components/ToolSelectionPage';\n\n// MessageModal Component for displaying alerts and confirmations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageModal = ({\n  message,\n  type,\n  onClose\n}) => {\n  if (!message) return null; // Don't render if no message\n\n  // Determine styling based on message type (success, error, info)\n  const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';\n  const title = type === 'error' ? 'Error' : type === 'success' ? 'Success' : 'Information';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `rounded-lg shadow-xl p-6 w-full max-w-sm ${bgColor} text-white`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-2xl font-bold mb-4 text-center\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg mb-6 text-center\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"w-full bg-white text-gray-800 py-2 px-4 rounded-md font-semibold hover:bg-gray-200 transition duration-200\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n// Main App component\n_c = MessageModal;\nconst App = () => {\n  _s();\n  // State to manage the current page view ('home', 'translator', 'summarizer', 'email-writer', 'text-to-speech', 'code-generator', 'story-generator', 'linkedin-post-writer', 'prompt-generator', 'settings')\n  const [currentPage, setCurrentPage] = useState('home'); // Default to 'home' page\n\n  // State variables for the Text Translator tool\n  const [translationInput, setTranslationInput] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [sourceLanguage, setSourceLanguage] = useState('en'); // Default source language\n  const [targetLanguage, setTargetLanguage] = useState('fr'); // Default target language\n  const [isTranslating, setIsTranslating] = useState(false);\n\n  // State variables for the Text Summarization tool\n  const [summarizationInput, setSummarizationInput] = useState('');\n  const [summarizedText, setSummarizedText] = useState('');\n  const [isSummarizing, setIsSummarizing] = useState(false);\n\n  // State variables for AI Email Writer tool\n  const [emailSubject, setEmailSubject] = useState('');\n  const [emailRecipient, setEmailRecipient] = useState('');\n  const [emailPrompt, setEmailPrompt] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [isGeneratingEmail, setIsGeneratingEmail] = useState(false);\n\n  // State variables for Text-to-Speech tool\n  const [speechText, setSpeechText] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  // State variables for AI Code Generator tool\n  const [codePrompt, setCodePrompt] = useState('');\n  const [generatedCode, setGeneratedCode] = useState('');\n  const [isGeneratingCode, setIsGeneratingCode] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState('Python'); // Default code language\n\n  // State variables for AI Story Generator tool\n  const [storyPrompt, setStoryPrompt] = useState('');\n  const [storyCharacters, setStoryCharacters] = useState(''); // New state for characters\n  const [storyLength, setStoryLength] = useState('medium'); // New state for story length\n  const [storyTone, setStoryTone] = useState('professional'); // New state for story tone\n  const [generatedStory, setGeneratedStory] = useState('');\n  const [isGeneratingStory, setIsGeneratingStory] = useState(false);\n\n  // State variables for LinkedIn Post Writer tool\n  const [linkedInTopic, setLinkedInTopic] = useState('');\n  const [linkedInKeyPoints, setLinkedInKeyPoints] = useState('');\n  const [linkedInTone, setLinkedInTone] = useState('Professional');\n  const [linkedInCallToAction, setLinkedInCallToAction] = useState('');\n  const [linkedInHashtags, setLinkedInHashtags] = useState('');\n  const [generatedLinkedInPost, setGeneratedLinkedInPost] = useState('');\n  const [isGeneratingLinkedInPost, setIsGeneratingLinkedInPost] = useState(false);\n\n  // State variables for Prompt Generator tool (UPDATED)\n  const [promptInput, setPromptInput] = useState('');\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [isGeneratingPrompt, setIsGeneratingPrompt] = useState(false);\n\n  // State for API Key in settings\n  const [apiKey, setApiKey] = useState('');\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [hasApiKey, setHasApiKey] = useState(false); // New state to track API key presence\n\n  // State for modal messages\n  const [modalMessage, setModalMessage] = useState('');\n  const [modalType, setModalType] = useState('');\n\n  // Function to show the modal\n  const showMessage = (message, type) => {\n    setModalMessage(message);\n    setModalType(type);\n  };\n\n  // Function to close the modal\n  const closeMessage = () => {\n    setModalMessage('');\n    setModalType('');\n  };\n\n  // Load API key from local storage on component mount and update hasApiKey state\n  useEffect(() => {\n    const storedApiKey = localStorage.getItem('googleApiKey');\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n      setHasApiKey(true);\n    } else {\n      setHasApiKey(false);\n    }\n  }, []);\n\n  // Function to call the Gemini API for text generation\n  const callGeminiApi = async prompt => {\n    const currentApiKey = localStorage.getItem('googleApiKey');\n    if (!currentApiKey) {\n      throw new Error(\"Google API Key is not set. Please go to Settings to enter your API key.\");\n    }\n    let chatHistory = [];\n    chatHistory.push({\n      role: \"user\",\n      parts: [{\n        text: prompt\n      }]\n    });\n    const payload = {\n      contents: chatHistory\n    };\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${currentApiKey}`;\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`API error: ${response.status} - ${errorData.error.message || response.statusText}`);\n      }\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        return result.candidates[0].content.parts[0].text;\n      } else {\n        return \"No content found in the response.\";\n      }\n    } catch (error) {\n      console.error(\"Error calling Gemini API:\", error);\n      throw error;\n    }\n  };\n\n  // Handler for text translation\n  const handleTranslate = async () => {\n    if (!translationInput.trim()) {\n      showMessage(\"Please enter text to translate.\", \"error\");\n      return;\n    }\n    setIsTranslating(true);\n    setTranslatedText(''); // Clear previous result\n\n    const prompt = `Translate the following text from ${sourceLanguage} to ${targetLanguage}. Provide only the translated text, without any additional explanations or formatting: \"${translationInput}\"`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setTranslatedText(result);\n    } catch (error) {\n      showMessage(`Failed to translate: ${error.message}`, \"error\");\n    } finally {\n      setIsTranslating(false);\n    }\n  };\n\n  // Handler for text summarization\n  const handleSummarize = async () => {\n    if (!summarizationInput.trim()) {\n      showMessage(\"Please enter text to summarize.\", \"error\");\n      return;\n    }\n    setIsSummarizing(true);\n    setSummarizedText(''); // Clear previous result\n\n    const prompt = `Summarize the following text concisely. Provide only the summary, without any additional explanations or formatting: \"${summarizationInput}\"`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setSummarizedText(result);\n    } catch (error) {\n      showMessage(`Failed to summarize: ${error.message}`, \"error\");\n    } finally {\n      setIsSummarizing(false);\n    }\n  };\n\n  // Handler for AI Email Writer\n  const handleGenerateEmail = async () => {\n    if (!emailPrompt.trim()) {\n      showMessage(\"Please describe the content of the email.\", \"error\");\n      return;\n    }\n    setIsGeneratingEmail(true);\n    setGeneratedEmail(''); // Clear previous result\n\n    let prompt = `Write a professional and well-structured email.`;\n    if (emailSubject.trim()) {\n      prompt += ` The subject is: \"${emailSubject.trim()}\".`;\n    }\n    if (emailRecipient.trim()) {\n      prompt += ` The recipient is: \"${emailRecipient.trim()}\".`;\n    } else {\n      prompt += ` Address it to a general professional audience.`;\n    }\n    prompt += ` The core content should be about: \"${emailPrompt.trim()}\". Ensure the email has a clear greeting, body paragraphs, and a professional closing. Provide only the complete email, including Subject and To/Recipient lines if provided, without any introductory or concluding remarks from you.`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setGeneratedEmail(result);\n    } catch (error) {\n      showMessage(`Failed to generate email: ${error.message}`, \"error\");\n    } finally {\n      setIsGeneratingEmail(false);\n    }\n  };\n\n  // Handler for AI Code Generator\n  const handleGenerateCode = async () => {\n    if (!codePrompt.trim()) {\n      showMessage(\"Please describe the code you want to generate.\", \"error\");\n      return;\n    }\n    setIsGeneratingCode(true);\n    setGeneratedCode(''); // Clear previous result\n\n    const prompt = `Generate a ${selectedLanguage} code snippet for the following description: \"${codePrompt.trim()}\". Provide only the code, enclosed in a markdown code block (e.g., \\`\\`\\`${selectedLanguage.toLowerCase()}\\n// code here\\n\\`\\`\\`), without any additional explanations or conversational text.`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setGeneratedCode(result);\n    } catch (error) {\n      showMessage(`Failed to generate code: ${error.message}`, \"error\");\n    } finally {\n      setIsGeneratingCode(false);\n    }\n  };\n\n  // Handler for AI Story Generator\n  const handleGenerateStory = async () => {\n    if (!storyPrompt.trim()) {\n      showMessage(\"Please enter a prompt or idea for your story.\", \"error\");\n      return;\n    }\n    setIsGeneratingStory(true);\n    setGeneratedStory(''); // Clear previous result\n\n    let prompt = `Generate a creative and engaging story in English.`; // Explicitly request English\n\n    if (storyCharacters.trim()) {\n      prompt += ` The story should feature the following characters: ${storyCharacters.trim()}.`;\n    }\n    prompt += ` The story should have a ${storyTone} tone and be ${storyLength} in length.`;\n    prompt += ` The core idea for the story is: \"${storyPrompt.trim()}\". Ensure it has a clear beginning, middle, and end, with character development and a compelling plot. Provide only the story text, without any introductory or concluding remarks from you.`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setGeneratedStory(result);\n    } catch (error) {\n      showMessage(`Failed to generate story: ${error.message}`, \"error\");\n    } finally {\n      setIsGeneratingStory(false);\n    }\n  };\n\n  // Handler for LinkedIn Post Writer\n  const handleGenerateLinkedInPost = async () => {\n    if (!linkedInTopic.trim()) {\n      showMessage(\"Please enter a topic for your LinkedIn post.\", \"error\");\n      return;\n    }\n    setIsGeneratingLinkedInPost(true);\n    setGeneratedLinkedInPost(''); // Clear previous result\n\n    let prompt = `Write a professional LinkedIn post about \"${linkedInTopic.trim()}\".`;\n    if (linkedInKeyPoints.trim()) {\n      prompt += ` Include the following key points: ${linkedInKeyPoints.trim()}.`;\n    }\n    prompt += ` The tone should be ${linkedInTone}.`;\n    if (linkedInCallToAction.trim()) {\n      prompt += ` Add a call to action: \"${linkedInCallToAction.trim()}\".`;\n    }\n    if (linkedInHashtags.trim()) {\n      prompt += ` Suggest relevant hashtags: ${linkedInHashtags.trim()}.`;\n    } else {\n      prompt += ` Include a few relevant hashtags.`;\n    }\n    prompt += ` Ensure the post is concise, engaging, and suitable for a professional network. Provide only the LinkedIn post content, without any introductory or concluding remarks from you.`;\n    try {\n      const result = await callGeminiApi(prompt);\n      setGeneratedLinkedInPost(result);\n    } catch (error) {\n      showMessage(`Failed to generate LinkedIn post: ${error.message}`, \"error\");\n    } finally {\n      setIsGeneratingLinkedInPost(false);\n    }\n  };\n\n  // Handler for Prompt Generator (UPDATED)\n  const handleGeneratePrompt = async () => {\n    if (!promptInput.trim()) {\n      showMessage(\"Please enter your desired topic or request for the prompt.\", \"error\");\n      return;\n    }\n    setIsGeneratingPrompt(true);\n    setGeneratedPrompt(''); // Clear previous result\n\n    // Construct the prompt to ask the AI to generate a professional prompt based on user input\n    const metaPrompt = `Generate a professional and concise AI prompt (between 5 and 10 lines) based on the following user request: \"${promptInput.trim()}\". The generated prompt should be ready for another AI to use, clearly defining the task, expected output, and any key constraints or details implied by the request. Do NOT include any code snippets, example usage, or bonus sections in the generated prompt.`;\n    try {\n      const result = await callGeminiApi(metaPrompt);\n      setGeneratedPrompt(result);\n      setPromptInput(''); // Clear input after successful generation\n    } catch (error) {\n      showMessage(`Failed to generate prompt: ${error.message}`, \"error\");\n    } finally {\n      setIsGeneratingPrompt(false);\n    }\n  };\n\n  // Handler to save API key to local storage\n  const handleSaveApiKey = () => {\n    if (apiKey.trim()) {\n      localStorage.setItem('googleApiKey', apiKey.trim());\n      setHasApiKey(true); // Update state when key is saved\n      showMessage('API Key saved successfully!', 'success');\n    } else {\n      setHasApiKey(false); // Update state when key is empty\n      showMessage('Please enter an API Key.', 'error');\n    }\n  };\n\n  // Handler to clear API key from local storage\n  const handleClearApiKey = () => {\n    localStorage.removeItem('googleApiKey');\n    setApiKey('');\n    setHasApiKey(false); // Update state when key is cleared\n    showMessage('API Key cleared.', 'info');\n  };\n\n  // Function to render the current page based on currentPage state\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'home':\n        return /*#__PURE__*/_jsxDEV(ToolSelectionPage, {\n          onSelectTool: setCurrentPage,\n          hasApiKey: hasApiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 24\n        }, this);\n      case 'translator':\n        return /*#__PURE__*/_jsxDEV(TextTranslatorTool, {\n          translationInput: translationInput,\n          setTranslationInput: setTranslationInput,\n          translatedText: translatedText,\n          setTranslatedText: setTranslatedText,\n          sourceLanguage: sourceLanguage,\n          setSourceLanguage: setSourceLanguage,\n          targetLanguage: targetLanguage,\n          setTargetLanguage: setTargetLanguage,\n          isTranslating: isTranslating,\n          handleTranslate: handleTranslate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this);\n      case 'summarizer':\n        return /*#__PURE__*/_jsxDEV(TextSummarizationTool, {\n          summarizationInput: summarizationInput,\n          setSummarizationInput: setSummarizationInput,\n          summarizedText: summarizedText,\n          setSummarizedText: setSummarizedText,\n          isSummarizing: isSummarizing,\n          handleSummarize: handleSummarize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this);\n      case 'email-writer':\n        return /*#__PURE__*/_jsxDEV(AIEmailWriterTool, {\n          emailSubject: emailSubject,\n          setEmailSubject: setEmailSubject,\n          emailRecipient: emailRecipient,\n          emailPrompt: emailPrompt,\n          setEmailPrompt: setEmailPrompt,\n          generatedEmail: generatedEmail,\n          setGeneratedEmail: setGeneratedEmail,\n          isGeneratingEmail: isGeneratingEmail,\n          handleGenerateEmail: handleGenerateEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 21\n        }, this);\n      case 'text-to-speech':\n        return /*#__PURE__*/_jsxDEV(TextToSpeechTool, {\n          speechText: speechText,\n          setSpeechText: setSpeechText,\n          isSpeaking: isSpeaking,\n          setIsSpeaking: setIsSpeaking,\n          showMessage: showMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this);\n      case 'code-generator':\n        return /*#__PURE__*/_jsxDEV(AICodeGeneratorTool, {\n          codePrompt: codePrompt,\n          setCodePrompt: setCodePrompt,\n          generatedCode: generatedCode,\n          setGeneratedCode: setGeneratedCode,\n          isGeneratingCode: isGeneratingCode,\n          handleGenerateCode: handleGenerateCode,\n          selectedLanguage: selectedLanguage,\n          setSelectedLanguage: setSelectedLanguage,\n          showMessage: showMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 21\n        }, this);\n      case 'story-generator':\n        return /*#__PURE__*/_jsxDEV(AIStoryGeneratorTool, {\n          storyPrompt: storyPrompt,\n          setStoryPrompt: setStoryPrompt,\n          generatedStory: generatedStory,\n          setGeneratedStory: setGeneratedStory,\n          isGeneratingStory: isGeneratingStory,\n          handleGenerateStory: handleGenerateStory,\n          storyCharacters: storyCharacters,\n          setStoryCharacters: setStoryCharacters,\n          storyLength: storyLength,\n          setStoryLength: setStoryLength,\n          storyTone: storyTone,\n          setStoryTone: storyTone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 21\n        }, this);\n      case 'linkedin-post-writer':\n        return /*#__PURE__*/_jsxDEV(LinkedInPostWriterTool, {\n          linkedInTopic: linkedInTopic,\n          setLinkedInTopic: setLinkedInTopic,\n          linkedInKeyPoints: linkedInKeyPoints,\n          setLinkedInKeyPoints: setLinkedInKeyPoints,\n          linkedInTone: linkedInTone,\n          setLinkedInTone: linkedInTone,\n          linkedInCallToAction: linkedInCallToAction,\n          setLinkedInCallToAction: linkedInCallToAction,\n          linkedInHashtags: linkedInHashtags,\n          setLinkedInHashtags: setLinkedInHashtags,\n          generatedLinkedInPost: generatedLinkedInPost,\n          setGeneratedLinkedInPost: setGeneratedLinkedInPost,\n          isGeneratingLinkedInPost: isGeneratingLinkedInPost,\n          handleGenerateLinkedInPost: handleGenerateLinkedInPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this);\n      case 'prompt-generator':\n        return /*#__PURE__*/_jsxDEV(PromptGeneratorTool, {\n          promptInput: promptInput,\n          setPromptInput: setPromptInput,\n          generatedPrompt: generatedPrompt,\n          setGeneratedPrompt: setGeneratedPrompt,\n          isGeneratingPrompt: isGeneratingPrompt,\n          handleGeneratePrompt: handleGeneratePrompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 21\n        }, this);\n      case 'settings':\n        return /*#__PURE__*/_jsxDEV(SettingsPage, {\n          apiKey: apiKey,\n          setApiKey: setApiKey,\n          showApiKey: showApiKey,\n          setShowApiKey: setShowApiKey,\n          handleSaveApiKey: handleSaveApiKey,\n          handleClearApiKey: handleClearApiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 21\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(ToolSelectionPage, {\n          onSelectTool: setCurrentPage,\n          hasApiKey: hasApiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Main container with Tailwind CSS for responsiveness and styling\n    _jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex flex-col font-inter\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"bg-gray-800 text-white p-4 sm:p-6 shadow-lg flex flex-col sm:flex-row justify-between items-center rounded-b-xl mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl sm:text-3xl font-bold mb-4 sm:mb-0\",\n          children: \"Toolnify.ai\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"flex flex-col sm:flex-row gap-2 sm:gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentPage('home'),\n            className: `py-2 px-4 rounded-md text-lg font-medium transition duration-200 ${currentPage === 'home' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700 text-gray-300'}`,\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentPage('settings'),\n            className: `py-2 px-4 rounded-md text-lg font-medium transition duration-200 ${currentPage === 'settings' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700 text-gray-300'}`,\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow flex items-center justify-center p-4 sm:p-8\",\n        children: renderPage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AIChatbot, {\n        callGeminiApi: callGeminiApi,\n        showMessage: showMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MessageModal, {\n        message: modalMessage,\n        type: modalType,\n        onClose: closeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(App, \"47zXB3OMaRuaDoIPJqH7mOXDqZ0=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageModal\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AIChatbot","AICodeGeneratorTool","AIEmailWriterTool","AIStoryGeneratorTool","LinkedInPostWriterTool","PromptGeneratorTool","SettingsPage","TextSummarizationTool","TextToSpeechTool","TextTranslatorTool","ToolSelectionPage","jsxDEV","_jsxDEV","MessageModal","message","type","onClose","bgColor","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","App","_s","currentPage","setCurrentPage","translationInput","setTranslationInput","translatedText","setTranslatedText","sourceLanguage","setSourceLanguage","targetLanguage","setTargetLanguage","isTranslating","setIsTranslating","summarizationInput","setSummarizationInput","summarizedText","setSummarizedText","isSummarizing","setIsSummarizing","emailSubject","setEmailSubject","emailRecipient","setEmailRecipient","emailPrompt","setEmailPrompt","generatedEmail","setGeneratedEmail","isGeneratingEmail","setIsGeneratingEmail","speechText","setSpeechText","isSpeaking","setIsSpeaking","codePrompt","setCodePrompt","generatedCode","setGeneratedCode","isGeneratingCode","setIsGeneratingCode","selectedLanguage","setSelectedLanguage","storyPrompt","setStoryPrompt","storyCharacters","setStoryCharacters","storyLength","setStoryLength","storyTone","setStoryTone","generatedStory","setGeneratedStory","isGeneratingStory","setIsGeneratingStory","linkedInTopic","setLinkedInTopic","linkedInKeyPoints","setLinkedInKeyPoints","linkedInTone","setLinkedInTone","linkedInCallToAction","setLinkedInCallToAction","linkedInHashtags","setLinkedInHashtags","generatedLinkedInPost","setGeneratedLinkedInPost","isGeneratingLinkedInPost","setIsGeneratingLinkedInPost","promptInput","setPromptInput","generatedPrompt","setGeneratedPrompt","isGeneratingPrompt","setIsGeneratingPrompt","apiKey","setApiKey","showApiKey","setShowApiKey","hasApiKey","setHasApiKey","modalMessage","setModalMessage","modalType","setModalType","showMessage","closeMessage","storedApiKey","localStorage","getItem","callGeminiApi","prompt","currentApiKey","Error","chatHistory","push","role","parts","text","payload","contents","apiUrl","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","status","error","statusText","result","candidates","length","content","console","handleTranslate","trim","handleSummarize","handleGenerateEmail","handleGenerateCode","toLowerCase","handleGenerateStory","handleGenerateLinkedInPost","handleGeneratePrompt","metaPrompt","handleSaveApiKey","setItem","handleClearApiKey","removeItem","renderPage","onSelectTool","_c2","$RefreshReg$"],"sources":["C:/Users/Darsh/OneDrive/Desktop/New folder/toolnify-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport AIChatbot from './components/AIChatbot';\r\nimport AICodeGeneratorTool from './components/AICodeGeneratorTool';\r\nimport AIEmailWriterTool from './components/AIEmailWriterTool';\r\nimport AIStoryGeneratorTool from './components/AIStoryGeneratorTool';\r\nimport LinkedInPostWriterTool from './components/LinkedInPostWriterTool';\r\nimport PromptGeneratorTool from './components/PromptGeneratorTool';\r\nimport SettingsPage from './components/SettingsPage';\r\nimport TextSummarizationTool from './components/TextSummarizationTool';\r\nimport TextToSpeechTool from './components/TextToSpeechTool';\r\nimport TextTranslatorTool from './components/TextTranslatorTool';\r\nimport ToolSelectionPage from './components/ToolSelectionPage';\r\n\r\n// MessageModal Component for displaying alerts and confirmations\r\nconst MessageModal = ({ message, type, onClose }) => {\r\n    if (!message) return null; // Don't render if no message\r\n\r\n    // Determine styling based on message type (success, error, info)\r\n    const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';\r\n    const title = type === 'error' ? 'Error' : type === 'success' ? 'Success' : 'Information';\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\r\n            <div className={`rounded-lg shadow-xl p-6 w-full max-w-sm ${bgColor} text-white`}>\r\n                <h3 className=\"text-2xl font-bold mb-4 text-center\">{title}</h3>\r\n                <p className=\"text-lg mb-6 text-center\">{message}</p>\r\n                <button\r\n                    onClick={onClose}\r\n                    className=\"w-full bg-white text-gray-800 py-2 px-4 rounded-md font-semibold hover:bg-gray-200 transition duration-200\"\r\n                >\r\n                    Close\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component\r\nconst App = () => {\r\n    // State to manage the current page view ('home', 'translator', 'summarizer', 'email-writer', 'text-to-speech', 'code-generator', 'story-generator', 'linkedin-post-writer', 'prompt-generator', 'settings')\r\n    const [currentPage, setCurrentPage] = useState('home'); // Default to 'home' page\r\n\r\n    // State variables for the Text Translator tool\r\n    const [translationInput, setTranslationInput] = useState('');\r\n    const [translatedText, setTranslatedText] = useState('');\r\n    const [sourceLanguage, setSourceLanguage] = useState('en'); // Default source language\r\n    const [targetLanguage, setTargetLanguage] = useState('fr'); // Default target language\r\n    const [isTranslating, setIsTranslating] = useState(false);\r\n\r\n    // State variables for the Text Summarization tool\r\n    const [summarizationInput, setSummarizationInput] = useState('');\r\n    const [summarizedText, setSummarizedText] = useState('');\r\n    const [isSummarizing, setIsSummarizing] = useState(false);\r\n\r\n    // State variables for AI Email Writer tool\r\n    const [emailSubject, setEmailSubject] = useState('');\r\n    const [emailRecipient, setEmailRecipient] = useState('');\r\n    const [emailPrompt, setEmailPrompt] = useState('');\r\n    const [generatedEmail, setGeneratedEmail] = useState('');\r\n    const [isGeneratingEmail, setIsGeneratingEmail] = useState(false);\r\n\r\n    // State variables for Text-to-Speech tool\r\n    const [speechText, setSpeechText] = useState('');\r\n    const [isSpeaking, setIsSpeaking] = useState(false);\r\n\r\n    // State variables for AI Code Generator tool\r\n    const [codePrompt, setCodePrompt] = useState('');\r\n    const [generatedCode, setGeneratedCode] = useState('');\r\n    const [isGeneratingCode, setIsGeneratingCode] = useState(false);\r\n    const [selectedLanguage, setSelectedLanguage] = useState('Python'); // Default code language\r\n\r\n    // State variables for AI Story Generator tool\r\n    const [storyPrompt, setStoryPrompt] = useState('');\r\n    const [storyCharacters, setStoryCharacters] = useState(''); // New state for characters\r\n    const [storyLength, setStoryLength] = useState('medium'); // New state for story length\r\n    const [storyTone, setStoryTone] = useState('professional'); // New state for story tone\r\n    const [generatedStory, setGeneratedStory] = useState('');\r\n    const [isGeneratingStory, setIsGeneratingStory] = useState(false);\r\n\r\n    // State variables for LinkedIn Post Writer tool\r\n    const [linkedInTopic, setLinkedInTopic] = useState('');\r\n    const [linkedInKeyPoints, setLinkedInKeyPoints] = useState('');\r\n    const [linkedInTone, setLinkedInTone] = useState('Professional');\r\n    const [linkedInCallToAction, setLinkedInCallToAction] = useState('');\r\n    const [linkedInHashtags, setLinkedInHashtags] = useState('');\r\n    const [generatedLinkedInPost, setGeneratedLinkedInPost] = useState('');\r\n    const [isGeneratingLinkedInPost, setIsGeneratingLinkedInPost] = useState(false);\r\n\r\n    // State variables for Prompt Generator tool (UPDATED)\r\n    const [promptInput, setPromptInput] = useState('');\r\n    const [generatedPrompt, setGeneratedPrompt] = useState('');\r\n    const [isGeneratingPrompt, setIsGeneratingPrompt] = useState(false);\r\n\r\n\r\n    // State for API Key in settings\r\n    const [apiKey, setApiKey] = useState('');\r\n    const [showApiKey, setShowApiKey] = useState(false);\r\n    const [hasApiKey, setHasApiKey] = useState(false); // New state to track API key presence\r\n\r\n    // State for modal messages\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [modalType, setModalType] = useState('');\r\n\r\n    // Function to show the modal\r\n    const showMessage = (message, type) => {\r\n        setModalMessage(message);\r\n        setModalType(type);\r\n    };\r\n\r\n    // Function to close the modal\r\n    const closeMessage = () => {\r\n        setModalMessage('');\r\n        setModalType('');\r\n    };\r\n\r\n    // Load API key from local storage on component mount and update hasApiKey state\r\n    useEffect(() => {\r\n        const storedApiKey = localStorage.getItem('googleApiKey');\r\n        if (storedApiKey) {\r\n            setApiKey(storedApiKey);\r\n            setHasApiKey(true);\r\n        } else {\r\n            setHasApiKey(false);\r\n        }\r\n    }, []);\r\n\r\n    // Function to call the Gemini API for text generation\r\n    const callGeminiApi = async (prompt) => {\r\n        const currentApiKey = localStorage.getItem('googleApiKey');\r\n\r\n        if (!currentApiKey) {\r\n            throw new Error(\"Google API Key is not set. Please go to Settings to enter your API key.\");\r\n        }\r\n\r\n        let chatHistory = [];\r\n        chatHistory.push({ role: \"user\", parts: [{ text: prompt }] });\r\n\r\n        const payload = { contents: chatHistory };\r\n        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${currentApiKey}`;\r\n\r\n        try {\r\n            const response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(`API error: ${response.status} - ${errorData.error.message || response.statusText}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            if (result.candidates && result.candidates.length > 0 &&\r\n                result.candidates[0].content && result.candidates[0].content.parts &&\r\n                result.candidates[0].content.parts.length > 0) {\r\n                return result.candidates[0].content.parts[0].text;\r\n            } else {\r\n                return \"No content found in the response.\";\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error calling Gemini API:\", error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    // Handler for text translation\r\n    const handleTranslate = async () => {\r\n        if (!translationInput.trim()) {\r\n            showMessage(\"Please enter text to translate.\", \"error\");\r\n            return;\r\n        }\r\n        setIsTranslating(true);\r\n        setTranslatedText(''); // Clear previous result\r\n\r\n        const prompt = `Translate the following text from ${sourceLanguage} to ${targetLanguage}. Provide only the translated text, without any additional explanations or formatting: \"${translationInput}\"`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setTranslatedText(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to translate: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsTranslating(false);\r\n        }\r\n    };\r\n\r\n    // Handler for text summarization\r\n    const handleSummarize = async () => {\r\n        if (!summarizationInput.trim()) {\r\n            showMessage(\"Please enter text to summarize.\", \"error\");\r\n            return;\r\n        }\r\n        setIsSummarizing(true);\r\n        setSummarizedText(''); // Clear previous result\r\n\r\n        const prompt = `Summarize the following text concisely. Provide only the summary, without any additional explanations or formatting: \"${summarizationInput}\"`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setSummarizedText(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to summarize: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsSummarizing(false);\r\n        }\r\n    };\r\n\r\n    // Handler for AI Email Writer\r\n    const handleGenerateEmail = async () => {\r\n        if (!emailPrompt.trim()) {\r\n            showMessage(\"Please describe the content of the email.\", \"error\");\r\n            return;\r\n        }\r\n        setIsGeneratingEmail(true);\r\n        setGeneratedEmail(''); // Clear previous result\r\n\r\n        let prompt = `Write a professional and well-structured email.`;\r\n        if (emailSubject.trim()) {\r\n            prompt += ` The subject is: \"${emailSubject.trim()}\".`;\r\n        }\r\n        if (emailRecipient.trim()) {\r\n            prompt += ` The recipient is: \"${emailRecipient.trim()}\".`;\r\n        } else {\r\n            prompt += ` Address it to a general professional audience.`;\r\n        }\r\n        prompt += ` The core content should be about: \"${emailPrompt.trim()}\". Ensure the email has a clear greeting, body paragraphs, and a professional closing. Provide only the complete email, including Subject and To/Recipient lines if provided, without any introductory or concluding remarks from you.`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setGeneratedEmail(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to generate email: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsGeneratingEmail(false);\r\n        }\r\n    };\r\n\r\n    // Handler for AI Code Generator\r\n    const handleGenerateCode = async () => {\r\n        if (!codePrompt.trim()) {\r\n            showMessage(\"Please describe the code you want to generate.\", \"error\");\r\n            return;\r\n        }\r\n        setIsGeneratingCode(true);\r\n        setGeneratedCode(''); // Clear previous result\r\n\r\n        const prompt = `Generate a ${selectedLanguage} code snippet for the following description: \"${codePrompt.trim()}\". Provide only the code, enclosed in a markdown code block (e.g., \\`\\`\\`${selectedLanguage.toLowerCase()}\\n// code here\\n\\`\\`\\`), without any additional explanations or conversational text.`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setGeneratedCode(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to generate code: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsGeneratingCode(false);\r\n        }\r\n    };\r\n\r\n    // Handler for AI Story Generator\r\n    const handleGenerateStory = async () => {\r\n        if (!storyPrompt.trim()) {\r\n            showMessage(\"Please enter a prompt or idea for your story.\", \"error\");\r\n            return;\r\n        }\r\n        setIsGeneratingStory(true);\r\n        setGeneratedStory(''); // Clear previous result\r\n\r\n        let prompt = `Generate a creative and engaging story in English.`; // Explicitly request English\r\n\r\n        if (storyCharacters.trim()) {\r\n            prompt += ` The story should feature the following characters: ${storyCharacters.trim()}.`;\r\n        }\r\n\r\n        prompt += ` The story should have a ${storyTone} tone and be ${storyLength} in length.`;\r\n        prompt += ` The core idea for the story is: \"${storyPrompt.trim()}\". Ensure it has a clear beginning, middle, and end, with character development and a compelling plot. Provide only the story text, without any introductory or concluding remarks from you.`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setGeneratedStory(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to generate story: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsGeneratingStory(false);\r\n        }\r\n    };\r\n\r\n    // Handler for LinkedIn Post Writer\r\n    const handleGenerateLinkedInPost = async () => {\r\n        if (!linkedInTopic.trim()) {\r\n            showMessage(\"Please enter a topic for your LinkedIn post.\", \"error\");\r\n            return;\r\n        }\r\n        setIsGeneratingLinkedInPost(true);\r\n        setGeneratedLinkedInPost(''); // Clear previous result\r\n\r\n        let prompt = `Write a professional LinkedIn post about \"${linkedInTopic.trim()}\".`;\r\n\r\n        if (linkedInKeyPoints.trim()) {\r\n            prompt += ` Include the following key points: ${linkedInKeyPoints.trim()}.`;\r\n        }\r\n\r\n        prompt += ` The tone should be ${linkedInTone}.`;\r\n\r\n        if (linkedInCallToAction.trim()) {\r\n            prompt += ` Add a call to action: \"${linkedInCallToAction.trim()}\".`;\r\n        }\r\n\r\n        if (linkedInHashtags.trim()) {\r\n            prompt += ` Suggest relevant hashtags: ${linkedInHashtags.trim()}.`;\r\n        } else {\r\n            prompt += ` Include a few relevant hashtags.`;\r\n        }\r\n\r\n        prompt += ` Ensure the post is concise, engaging, and suitable for a professional network. Provide only the LinkedIn post content, without any introductory or concluding remarks from you.`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(prompt);\r\n            setGeneratedLinkedInPost(result);\r\n        } catch (error) {\r\n            showMessage(`Failed to generate LinkedIn post: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsGeneratingLinkedInPost(false);\r\n        }\r\n    };\r\n\r\n    // Handler for Prompt Generator (UPDATED)\r\n    const handleGeneratePrompt = async () => {\r\n        if (!promptInput.trim()) {\r\n            showMessage(\"Please enter your desired topic or request for the prompt.\", \"error\");\r\n            return;\r\n        }\r\n        setIsGeneratingPrompt(true);\r\n        setGeneratedPrompt(''); // Clear previous result\r\n\r\n        // Construct the prompt to ask the AI to generate a professional prompt based on user input\r\n        const metaPrompt = `Generate a professional and concise AI prompt (between 5 and 10 lines) based on the following user request: \"${promptInput.trim()}\". The generated prompt should be ready for another AI to use, clearly defining the task, expected output, and any key constraints or details implied by the request. Do NOT include any code snippets, example usage, or bonus sections in the generated prompt.`;\r\n\r\n        try {\r\n            const result = await callGeminiApi(metaPrompt);\r\n            setGeneratedPrompt(result);\r\n            setPromptInput(''); // Clear input after successful generation\r\n        } catch (error) {\r\n            showMessage(`Failed to generate prompt: ${error.message}`, \"error\");\r\n        } finally {\r\n            setIsGeneratingPrompt(false);\r\n        }\r\n    };\r\n\r\n\r\n    // Handler to save API key to local storage\r\n    const handleSaveApiKey = () => {\r\n        if (apiKey.trim()) {\r\n            localStorage.setItem('googleApiKey', apiKey.trim());\r\n            setHasApiKey(true); // Update state when key is saved\r\n            showMessage('API Key saved successfully!', 'success');\r\n        } else {\r\n            setHasApiKey(false); // Update state when key is empty\r\n            showMessage('Please enter an API Key.', 'error');\r\n        }\r\n    };\r\n\r\n    // Handler to clear API key from local storage\r\n    const handleClearApiKey = () => {\r\n        localStorage.removeItem('googleApiKey');\r\n        setApiKey('');\r\n        setHasApiKey(false); // Update state when key is cleared\r\n        showMessage('API Key cleared.', 'info');\r\n    };\r\n\r\n    // Function to render the current page based on currentPage state\r\n    const renderPage = () => {\r\n        switch (currentPage) {\r\n            case 'home':\r\n                return <ToolSelectionPage onSelectTool={setCurrentPage} hasApiKey={hasApiKey} />;\r\n            case 'translator':\r\n                return (\r\n                    <TextTranslatorTool\r\n                        translationInput={translationInput}\r\n                        setTranslationInput={setTranslationInput}\r\n                        translatedText={translatedText}\r\n                        setTranslatedText={setTranslatedText}\r\n                        sourceLanguage={sourceLanguage}\r\n                        setSourceLanguage={setSourceLanguage}\r\n                        targetLanguage={targetLanguage}\r\n                        setTargetLanguage={setTargetLanguage}\r\n                        isTranslating={isTranslating}\r\n                        handleTranslate={handleTranslate}\r\n                    />\r\n                );\r\n            case 'summarizer':\r\n                return (\r\n                    <TextSummarizationTool\r\n                        summarizationInput={summarizationInput}\r\n                        setSummarizationInput={setSummarizationInput}\r\n                        summarizedText={summarizedText}\r\n                        setSummarizedText={setSummarizedText}\r\n                        isSummarizing={isSummarizing}\r\n                        handleSummarize={handleSummarize}\r\n                    />\r\n                );\r\n            case 'email-writer':\r\n                return (\r\n                    <AIEmailWriterTool\r\n                        emailSubject={emailSubject}\r\n                        setEmailSubject={setEmailSubject}\r\n                        emailRecipient={emailRecipient}\r\n                        emailPrompt={emailPrompt}\r\n                        setEmailPrompt={setEmailPrompt}\r\n                        generatedEmail={generatedEmail}\r\n                        setGeneratedEmail={setGeneratedEmail}\r\n                        isGeneratingEmail={isGeneratingEmail}\r\n                        handleGenerateEmail={handleGenerateEmail}\r\n                    />\r\n                );\r\n            case 'text-to-speech':\r\n                return (\r\n                    <TextToSpeechTool\r\n                        speechText={speechText}\r\n                        setSpeechText={setSpeechText}\r\n                        isSpeaking={isSpeaking}\r\n                        setIsSpeaking={setIsSpeaking}\r\n                        showMessage={showMessage}\r\n                    />\r\n                );\r\n            case 'code-generator':\r\n                return (\r\n                    <AICodeGeneratorTool\r\n                        codePrompt={codePrompt}\r\n                        setCodePrompt={setCodePrompt}\r\n                        generatedCode={generatedCode}\r\n                        setGeneratedCode={setGeneratedCode}\r\n                        isGeneratingCode={isGeneratingCode}\r\n                        handleGenerateCode={handleGenerateCode}\r\n                        selectedLanguage={selectedLanguage}\r\n                        setSelectedLanguage={setSelectedLanguage}\r\n                        showMessage={showMessage}\r\n                    />\r\n                );\r\n            case 'story-generator':\r\n                return (\r\n                    <AIStoryGeneratorTool\r\n                        storyPrompt={storyPrompt}\r\n                        setStoryPrompt={setStoryPrompt}\r\n                        generatedStory={generatedStory}\r\n                        setGeneratedStory={setGeneratedStory}\r\n                        isGeneratingStory={isGeneratingStory}\r\n                        handleGenerateStory={handleGenerateStory}\r\n                        storyCharacters={storyCharacters}\r\n                        setStoryCharacters={setStoryCharacters}\r\n                        storyLength={storyLength}\r\n                        setStoryLength={setStoryLength}\r\n                        storyTone={storyTone}\r\n                        setStoryTone={storyTone}\r\n                    />\r\n                );\r\n            case 'linkedin-post-writer':\r\n                return (\r\n                    <LinkedInPostWriterTool\r\n                        linkedInTopic={linkedInTopic}\r\n                        setLinkedInTopic={setLinkedInTopic}\r\n                        linkedInKeyPoints={linkedInKeyPoints}\r\n                        setLinkedInKeyPoints={setLinkedInKeyPoints}\r\n                        linkedInTone={linkedInTone}\r\n                        setLinkedInTone={linkedInTone}\r\n                        linkedInCallToAction={linkedInCallToAction}\r\n                        setLinkedInCallToAction={linkedInCallToAction}\r\n                        linkedInHashtags={linkedInHashtags}\r\n                        setLinkedInHashtags={setLinkedInHashtags}\r\n                        generatedLinkedInPost={generatedLinkedInPost}\r\n                        setGeneratedLinkedInPost={setGeneratedLinkedInPost}\r\n                        isGeneratingLinkedInPost={isGeneratingLinkedInPost}\r\n                        handleGenerateLinkedInPost={handleGenerateLinkedInPost}\r\n                    />\r\n                );\r\n            case 'prompt-generator':\r\n                return (\r\n                    <PromptGeneratorTool\r\n                        promptInput={promptInput}\r\n                        setPromptInput={setPromptInput}\r\n                        generatedPrompt={generatedPrompt}\r\n                        setGeneratedPrompt={setGeneratedPrompt}\r\n                        isGeneratingPrompt={isGeneratingPrompt}\r\n                        handleGeneratePrompt={handleGeneratePrompt}\r\n                    />\r\n                );\r\n            case 'settings':\r\n                return (\r\n                    <SettingsPage\r\n                        apiKey={apiKey}\r\n                        setApiKey={setApiKey}\r\n                        showApiKey={showApiKey}\r\n                        setShowApiKey={setShowApiKey}\r\n                        handleSaveApiKey={handleSaveApiKey}\r\n                        handleClearApiKey={handleClearApiKey}\r\n                    />\r\n                );\r\n            default:\r\n                return <ToolSelectionPage onSelectTool={setCurrentPage} hasApiKey={hasApiKey} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        // Main container with Tailwind CSS for responsiveness and styling\r\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex flex-col font-inter\">\r\n            {/* Header Navigation */}\r\n            <header className=\"bg-gray-800 text-white p-4 sm:p-6 shadow-lg flex flex-col sm:flex-row justify-between items-center rounded-b-xl mb-4\">\r\n                <h2 className=\"text-2xl sm:text-3xl font-bold mb-4 sm:mb-0\">Toolnify.ai</h2>\r\n                <nav className=\"flex flex-col sm:flex-row gap-2 sm:gap-4\">\r\n                    <button\r\n                        onClick={() => setCurrentPage('home')}\r\n                        className={`py-2 px-4 rounded-md text-lg font-medium transition duration-200 ${\r\n                            currentPage === 'home' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700 text-gray-300'\r\n                        }`}\r\n                    >\r\n                        Home\r\n                    </button>\r\n                    <button\r\n                        onClick={() => setCurrentPage('settings')}\r\n                        className={`py-2 px-4 rounded-md text-lg font-medium transition duration-200 ${\r\n                            currentPage === 'settings' ? 'bg-blue-600 text-white shadow-md' : 'hover:bg-gray-700 text-gray-300'\r\n                        }`}\r\n                    >\r\n                        Settings\r\n                    </button>\r\n                </nav>\r\n            </header>\r\n\r\n            {/* Main Content Area */}\r\n            <div className=\"flex-grow flex items-center justify-center p-4 sm:p-8\">\r\n                {renderPage()}\r\n            </div>\r\n\r\n            {/* AI Chatbot */}\r\n            <AIChatbot callGeminiApi={callGeminiApi} showMessage={showMessage} />\r\n\r\n            {/* Message Modal */}\r\n            <MessageModal message={modalMessage} type={modalType} onClose={closeMessage} />\r\n\r\n            {/* Tailwind CSS CDN for styling */}\r\n            {/* These script and link tags should ideally be in public/index.html's <head> */}\r\n            {/* <script src=\"https://cdn.tailwindcss.com\"></script> */}\r\n            {/* <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap\" rel=\"stylesheet\" /> */}\r\n            {/* <style>\r\n                {`\r\n                body {\r\n                    font-family: 'Inter', sans-serif;\r\n                }\r\n                `}\r\n            </style> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}